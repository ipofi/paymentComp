{"version":3,"sources":["Components/Payment.js","App.js","reportWebVitals.js","index.js"],"names":["paymentReducer","state","dispatch","type","field","payload","Payment","useState","paymentType","setPaymentType","getPaymentTypes","a","fetch","headers","Accept","res","json","data","useEffect","checked","setChecked","display","PhoneNumDisplay","setPhoneNumDisplay","useReducer","paymentDetails","setPaymentDetails","handlePaymentInfo","target","name","value","contState","disableRefStat","setDisableRefStat","console","log","Form","Label","Select","className","payment_type","onChange","e","hasOwnProperty","disabled","map","payment","idx","id","Group","Control","placeholder","autoComplete","ref_no","Check","label","prev","phone_number","style","Button","variant","App","Container","Row","Col","md","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","SSRProvider","document","getElementById"],"mappings":"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","file":"static/js/main.7e29264b.chunk.js","sourcesContent":["import React, { useState, useEffect, useReducer } from 'react'\nimport { Form, Button } from 'react-bootstrap'\n\nconst paymentReducer = (state, dispatch) => {\n  switch (dispatch.type) {\n    case 'ADD':\n      return {\n        ...state,\n        [dispatch.field]: dispatch.payload,\n      }\n    default:\n      return state\n  }\n}\n\nconst Payment = () => {\n  const [paymentType, setPaymentType] = useState([])\n  const getPaymentTypes = async () => {\n    const res = await fetch('./JSON/paymenttype.json', {\n      headers: {\n        'Content-Type': 'application/json',\n        Accept: 'application/json',\n      },\n    })\n    const data = await res.json()\n    setPaymentType(data)\n  }\n\n  useEffect(() => {\n    getPaymentTypes()\n  }, [])\n\n  const getPaymentInfo = async () => {\n    // const res = await fetch(\n    //   `http://localhost:3004/paymentinfo?ref_no=${paymentDetails.ref_no}`,\n    //   {\n    //     headers: {\n    //       'Content-Type': 'application/json',\n    //       Accept: 'application/json',\n    //     },\n    //   }\n    // )\n    // // const status = res.status\n    // const data = await res.json()\n\n    // if (data === []) {\n    //   console.log('Not found')\n    // } else {\n    //   console.log(data)\n    // }\n    console.log(paymentDetails.ref_no)\n  }\n\n  const [checked, setChecked] = useState(false)\n  const [PhoneNumDisplay, setPhoneNumDisplay] = useState({ display: 'none' })\n  const handleCheckbox = () => {\n    setChecked((prev) => !prev)\n    setPhoneNumDisplay(checked ? { display: 'none' } : { display: 'block' })\n    if (PhoneNumDisplay.display !== 'none') {\n      const { phone_number, ...clear_phone_number } = paymentDetails\n      // setPaymentDetails(clear_phone_number)\n    }\n  }\n\n  const initialState = {\n    payment_type: '',\n    ref_no: '',\n    phone_number: '',\n  }\n  const [paymentDetails, setPaymentDetails] = useReducer(paymentReducer, {})\n  const handlePaymentInfo = ({ target }) => {\n    const { name, value } = target\n    setPaymentDetails({\n      type: 'ADD',\n      field: name,\n      payload: value,\n    })\n  }\n  // const handlePaymentInfo = ({ target }) => {\n  //   setPaymentDetails((prev) => ({\n  //     ...prev,\n  //     [target.name]: target.value,\n  //   }))\n  // }\n\n  const [contState, setContState] = useState(true)\n  const handlePaymentStatus = ({ target }) => {\n    // target.value.length === target.maxLength\n    //   ? setContState(false, setTimeout(getPaymentInfo(), 5000))\n    //   : setContState(true)\n\n    // if (target.value.length === target.maxLength) {\n    //   setContState(false)\n    //   setTimeout(() => {\n    //     // getPaymentInfo()\n    //     console.log(paymentDetails.ref_no)\n    //     console.log(target.maxLength)\n    //   }, 1000)\n    // } else {\n    //   setContState(true)\n    // }\n    console.log(paymentDetails.ref_no)\n  }\n  const [disableRefStat, setDisableRefStat] = useState(true)\n  const handleDisableRef = () => {\n    paymentDetails.hasOwnProperty('payment_type') || setDisableRefStat(false)\n  }\n\n  return (\n    <>\n      {console.log(paymentDetails)}\n      <h2>Payment Component</h2>\n\n      <Form>\n        <Form.Label>Select your Payment</Form.Label>\n        <Form.Select\n          className='mb-3'\n          value={paymentDetails.payment_type || ''}\n          onChange={(e) => {\n            handlePaymentInfo(e)\n            handleDisableRef()\n          }}\n          name='payment_type'\n        >\n          <option value='' disabled>\n            ---\n          </option>\n          {paymentType.map((payment, idx) => (\n            <option key={idx} value={payment.id}>\n              {payment.payment_type}\n            </option>\n          ))}\n        </Form.Select>\n\n        <Form.Group className='mb-3'>\n          <Form.Label>Enter Registration Number</Form.Label>\n          <Form.Control\n            type='text'\n            placeholder='Reference Number'\n            autoComplete='off'\n            value={paymentDetails.ref_no || ''}\n            name='ref_no'\n            onChange={(e) => {\n              handlePaymentInfo(e)\n              handlePaymentStatus(e)\n            }}\n            // maxLength={3}\n            disabled={disableRefStat}\n          />\n        </Form.Group>\n\n        <Form.Group className='mb-3'>\n          <Form.Check\n            type='checkbox'\n            id='sendrefno'\n            label='Send me the payment reference'\n            checked={checked}\n            onChange={handleCheckbox}\n          />\n        </Form.Group>\n\n        <Form.Group className='mb-3'>\n          <Form.Control\n            type='text'\n            placeholder='Enter Phone Number'\n            autoComplete='off'\n            style={PhoneNumDisplay}\n            value={paymentDetails.phone_number || ''}\n            name='phone_number'\n            onChange={handlePaymentInfo}\n          />\n        </Form.Group>\n\n        <Form.Group className='d-grid gap-2'>\n          <Button variant='warning' disabled={contState}>\n            Continue\n          </Button>\n        </Form.Group>\n      </Form>\n    </>\n  )\n}\n\nexport default Payment\n","import Payment from './Components/Payment'\nimport Container from 'react-bootstrap/Container'\nimport Row from 'react-bootstrap/Row'\nimport Col from 'react-bootstrap/Col'\n\nfunction App() {\n  return (\n    <>\n      <Container>\n        <Row className='justify-content-md-center'>\n          <Col md='auto' variant='primary'>\n            <Payment />\n          </Col>\n        </Row>\n      </Container>\n    </>\n  )\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\nimport SSRProvider from 'react-bootstrap/SSRProvider'\n\nReactDOM.render(\n  <React.StrictMode>\n    <SSRProvider>\n      <App />\n    </SSRProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}